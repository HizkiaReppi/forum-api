{
	"info": {
		"_postman_id": "8dcdef24-33e7-441c-85a6-e5740a2bdf6d",
		"name": "Forum API V1 Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12297972"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Add User with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response 201 status code', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('should response with correct property and message', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.addedUser).to.be.an('object');\r",
									"    pm.expect(responseJson.data.addedUser.id).to.be.a('string');\r",
									"    pm.expect(responseJson.data.addedUser.username).to.be.a('string');\r",
									"    pm.expect(responseJson.data.addedUser.fullname).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{newUsername}}_{{$timestamp}}\",\r\n    \"password\": \"{{newPassword}}\",\r\n    \"fullname\": \"{{newFullname}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/users",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User with Bad Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 400 value', () => {\r",
									"   pm.response.to.have.status(400);\r",
									"}); \r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equals('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"    pm.expect(responseJson.message).to.not.equals('');\r",
									"    pm.expect(responseJson.message).to.not.equals(null);\r",
									"});\r",
									"\r",
									"const repeatRequestUntilDatasetEmpty = () => {\r",
									"    const badAuthenticationPayloads = pm.environment.get('badAuthenticationPayloads');\r",
									" \r",
									"    if(badAuthenticationPayloads && badAuthenticationPayloads.length > 0) {\r",
									"        postman.setNextRequest('Add User with Bad Payload');\r",
									"    }\r",
									"}\r",
									" \r",
									"repeatRequestUntilDatasetEmpty();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let badAuthenticationPayloads = pm.environment.get('badAuthenticationPayloads');\r",
									"\r",
									"if (!badAuthenticationPayloads || badAuthenticationPayloads.length === 0) {\r",
									"    badAuthenticationPayloads = [\r",
									"        {},\r",
									"        { password: 'secret', fullname: 'Dicoding Indonesia' },\r",
									"        { username: 123, password: 'secret', fullname: 'Dicoding Indonesia' },\r",
									"        { username: 'dicoding', fullname: 'Dicoding Indonesia' },\r",
									"        { username: 'dicoding', password: true, fullname: 'Dicoding Indonesia' },\r",
									"        { username: 'dicoding', password: 'secret' },\r",
									"        { username: 'dicoding', password: 'secret', fullname: [] },\r",
									"    ];\r",
									"}\r",
									"\r",
									"const currentBadAuthenticationPayload = badAuthenticationPayloads.shift();\r",
									"pm.environment.set('currentBadAuthenticationPayload', JSON.stringify(currentBadAuthenticationPayload));\r",
									"pm.environment.set('badAuthenticationPayloads', badAuthenticationPayloads);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{currentBadAuthenticationPayload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/users",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User with Exist Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response 400 status code', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('should response with correct property and message', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.equal('username tidak tersedia');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const host = pm.environment.get('host');\r",
									"const port = pm.environment.get('port');\r",
									"const protocol = pm.environment.get('protocol');\r",
									"\r",
									"const postRequest = {\r",
									"    url: `${protocol}://${host}:${port}/users`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            username: pm.environment.get('newUsername'),\r",
									"            password: pm.environment.get('newPassword'),\r",
									"            fullname: pm.environment.get('newFullname')\r",
									"        }),\r",
									"    },\r",
									"};\r",
									"\r",
									"pm.sendRequest(postRequest, (error, response) => {\r",
									"    console.log(error ? error : response.json());\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{newUsername}}\",\r\n    \"password\": \"{{newPassword}}\",\r\n    \"fullname\": \"{{newFullname}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/users",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User with Exist Username Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response 400 status code', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('should response with correct property and message', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.equal('tidak dapat membuat user baru karena username mengandung karakter terlarang');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"dico ding\",\r\n    \"password\": \"{{newPassword}}\",\r\n    \"fullname\": \"{{newFullname}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/users",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentications",
			"item": [
				{
					"name": "[No Test] Prerequiresite",
					"item": [
						{
							"name": "Add User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{newUsername}}\",\r\n    \"password\": \"{{newPassword}}\",\r\n    \"fullname\": \"{{newFullname}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login with Invalid Password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const host = pm.environment.get('host');\r",
									"const port = pm.environment.get('port');\r",
									"const protocol = pm.environment.get('protocol');\r",
									"\r",
									"const postRequest = {\r",
									"    url: `${protocol}://${host}:${port}/users`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            username: pm.environment.get('newUsername'),\r",
									"            password: pm.environment.get('newPassword'),\r",
									"            fullname: pm.environment.get('newFullname')\r",
									"        }),\r",
									"    },\r",
									"};\r",
									"\r",
									"pm.sendRequest(postRequest, (error, response) => {\r",
									"    console.log(error ? error : response.json());\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response 401 status code', () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('should respose with correct property and message', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.an('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{newUsername}}\",\r\n    \"password\": \"xxx\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/authentications",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with Invalid Username",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const host = pm.environment.get('host');\r",
									"const port = pm.environment.get('port');\r",
									"const protocol = pm.environment.get('protocol');\r",
									"\r",
									"const postRequest = {\r",
									"    url: `${protocol}://${host}:${port}/users`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            username: pm.environment.get('newUsername'),\r",
									"            password: pm.environment.get('newPassword'),\r",
									"            fullname: pm.environment.get('newFullname')\r",
									"        }),\r",
									"    },\r",
									"};\r",
									"\r",
									"pm.sendRequest(postRequest, (error, response) => {\r",
									"    console.log(error ? error : response.json());\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response 400 status code', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('should respose with correct property and message', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.an('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"xxxx\",\r\n    \"password\": \"{{newPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/authentications",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with Valid Credential",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const host = pm.environment.get('host');\r",
									"const port = pm.environment.get('port');\r",
									"const protocol = pm.environment.get('protocol');\r",
									"\r",
									"const postRequest = {\r",
									"    url: `${protocol}://${host}:${port}/users`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            username: pm.environment.get('newUsername'),\r",
									"            password: pm.environment.get('newPassword'),\r",
									"            fullname: pm.environment.get('newFullname')\r",
									"        }),\r",
									"    },\r",
									"};\r",
									"\r",
									"pm.sendRequest(postRequest, (error, response) => {\r",
									"    console.log(error ? error : response.json());\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response 201 status code', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('should respose with correct property and message', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.accessToken).to.be.a('string');\r",
									"    pm.expect(responseJson.data.refreshToken).to.be.a('string');\r",
									"\r",
									"    pm.environment.set('accessToken', responseJson.data.accessToken);\r",
									"    pm.environment.set('refreshToken', responseJson.data.refreshToken);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{newUsername}}\",\r\n    \"password\": \"{{newPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/authentications",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Access Token with Valid Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response 200 status code', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('should response with corrent message and property', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.accessToken).to.be.a('string');\r",
									"    pm.expect(responseJson.data.accessToken).to.not.equals('');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"{{refreshToken}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/authentications",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Access Token with invalid Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response 400 status code', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('should response with corrent message and property', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.equal('refresh token tidak valid');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"xxx\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/authentications",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout with Valid Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response with 200 status code', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response should contain status with success value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"});\r",
									"\r",
									"pm.test('when refreshing access token with the deleted refresh token', () => {\r",
									"    const host = pm.environment.get('host');\r",
									"    const port = pm.environment.get('port');\r",
									"    const protocol = pm.environment.get('protocol');\r",
									"    const refreshToken = pm.environment.get('refreshToken');\r",
									"\r",
									"    const putRequest = {\r",
									"        url: `${protocol}://${host}:${port}/authentications`,\r",
									"        method: 'PUT',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({ refreshToken }),\r",
									"        },\r",
									"    };\r",
									"\r",
									"    pm.sendRequest(putRequest, (error, response) => {\r",
									"        if (!error) {\r",
									"            pm.test('the response code should be 400', () => {\r",
									"                pm.expect(response.code).to.equals(400);\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"{{refreshToken}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/authentications",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout with Invalid Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response with 400 status code', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response should contain correct status and message', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.equal('refresh token tidak ditemukan di database');\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"xxx\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/authentications",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"authentications"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Threads",
			"item": [
				{
					"name": "[No Test] Prerequiresite",
					"item": [
						{
							"name": "[No Test] Add User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{newUsername}}\",\r\n    \"password\": \"{{newPassword}}\",\r\n    \"fullname\": \"{{newFullname}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[No Test] Login",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const host = pm.environment.get('host');\r",
											"const port = pm.environment.get('port');\r",
											"const protocol = pm.environment.get('protocol');\r",
											"\r",
											"const postRequest = {\r",
											"    url: `${protocol}://${host}:${port}/users`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            username: pm.environment.get('newUsername'),\r",
											"            password: pm.environment.get('newPassword'),\r",
											"            fullname: pm.environment.get('newFullname')\r",
											"        }),\r",
											"    },\r",
											"};\r",
											"\r",
											"pm.sendRequest(postRequest, (error, response) => {\r",
											"    console.log(error ? error : response.json());\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.environment.set('accessToken', responseJson.data.accessToken);\r",
											"pm.environment.set('refreshToken', responseJson.data.refreshToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{newUsername}}\",\r\n    \"password\": \"{{newPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/authentications",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"authentications"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add Thread with No Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response 401 status code', () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('should show Missing Authentication message', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.message).to.equal('Missing authentication');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Thread with Bad Payload",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let badThreadPayloads = pm.environment.get('badThreadPayloads');\r",
									"\r",
									"if (!badThreadPayloads || badThreadPayloads.length === 0) {\r",
									"    badThreadPayloads = [\r",
									"        {},\r",
									"        { body: 'A Body' },\r",
									"        { title: 123, body: 'A Body' },\r",
									"        { title: 'A Thread' },\r",
									"        { title: 'A Thread', body: true },\r",
									"    ];\r",
									"}\r",
									"\r",
									"const currentBadThreadPayload = badThreadPayloads.shift();\r",
									"pm.environment.set('currentBadThreadPayload', JSON.stringify(currentBadThreadPayload));\r",
									"pm.environment.set('badThreadPayloads', badThreadPayloads);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response 400 status code', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('should show fail status and message', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"    pm.expect(responseJson.message).to.not.equal('');\r",
									"});\r",
									"\r",
									"const repeatRequestUntilDatasetEmpty = () => {\r",
									"    const badThreadPayloads = pm.environment.get('badThreadPayloads');\r",
									" \r",
									"    if(badThreadPayloads && badThreadPayloads.length > 0) {\r",
									"        postman.setNextRequest('Add Thread with Bad Payload');\r",
									"    }\r",
									"}\r",
									" \r",
									"repeatRequestUntilDatasetEmpty();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{currentBadThreadPayload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Thread with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response 201 status code', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('should response with valid property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.addedThread).to.be.an('object');\r",
									"    pm.expect(responseJson.data.addedThread.id).to.be.a('string');\r",
									"    pm.expect(responseJson.data.addedThread.id).to.not.equal('');\r",
									"    pm.expect(responseJson.data.addedThread.title).to.be.a('string');\r",
									"    pm.expect(responseJson.data.addedThread.title).to.not.equal('');\r",
									"    pm.expect(responseJson.data.addedThread.owner).to.be.a('string');\r",
									"    pm.expect(responseJson.data.addedThread.owner).to.not.equal('');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{newThreadTitle}}\",\r\n    \"body\": \"{{newThreadBody}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "[No Test] Prerequiresite",
					"item": [
						{
							"name": "[No Test] Add User Dicoding",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{newUsername}}\",\r\n    \"password\": \"{{newPassword}}\",\r\n    \"fullname\": \"{{newFullname}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[No Test] Add User Johndoe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{newUsername2}}\",\r\n    \"password\": \"{{newPassword2}}\",\r\n    \"fullname\": \"{{newFullname2}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[No Test] Login User Dicoding",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const host = pm.environment.get('host');\r",
											"const port = pm.environment.get('port');\r",
											"const protocol = pm.environment.get('protocol');\r",
											"\r",
											"const postRequest = {\r",
											"    url: `${protocol}://${host}:${port}/users`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            username: pm.environment.get('newUsername'),\r",
											"            password: pm.environment.get('newPassword'),\r",
											"            fullname: pm.environment.get('newFullname')\r",
											"        }),\r",
											"    },\r",
											"};\r",
											"\r",
											"pm.sendRequest(postRequest, (error, response) => {\r",
											"    console.log(error ? error : response.json());\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.environment.set('accessToken', responseJson.data.accessToken);\r",
											"pm.environment.set('refreshToken', responseJson.data.refreshToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{newUsername}}\",\r\n    \"password\": \"{{newPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/authentications",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"authentications"
									]
								}
							},
							"response": []
						},
						{
							"name": "[No Test] Login User Johndoe",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const host = pm.environment.get('host');\r",
											"const port = pm.environment.get('port');\r",
											"const protocol = pm.environment.get('protocol');\r",
											"\r",
											"const postRequest = {\r",
											"    url: `${protocol}://${host}:${port}/users`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            username: pm.environment.get('newUsername'),\r",
											"            password: pm.environment.get('newPassword'),\r",
											"            fullname: pm.environment.get('newFullname')\r",
											"        }),\r",
											"    },\r",
											"};\r",
											"\r",
											"pm.sendRequest(postRequest, (error, response) => {\r",
											"    console.log(error ? error : response.json());\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.environment.set('accessToken2', responseJson.data.accessToken);\r",
											"pm.environment.set('refreshToken2', responseJson.data.refreshToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{newUsername2}}\",\r\n    \"password\": \"{{newPassword2}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/authentications",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"authentications"
									]
								}
							},
							"response": []
						},
						{
							"name": "[No Test] Add Thread with User Dicoding",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.environment.set('threadId', responseJson.data.addedThread.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"{{newThreadTitle}}\",\r\n    \"body\": \"{{newThreadBody}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/threads",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"threads"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add Comment with No Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response 401 status code', () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('should show Missing Authentication message', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.message).to.equal('Missing authentication');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"{{newCommentContent}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}/comments",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads",
								"{{threadId}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Comment with Not Found Thread",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response should have 404 status code', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.not.equal('');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"{{newCommentContent}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads/xxx/comments",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads",
								"xxx",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Comment with Invalid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response should have 400 status code', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.not.equal('');\r",
									"});\r",
									"\r",
									"const repeatRequestUntilDatasetEmpty = () => {\r",
									"    const badAddCommentPayloads = pm.environment.get('badAddCommentPayloads');\r",
									" \r",
									"    if(badAddCommentPayloads && badAddCommentPayloads.length > 0) {\r",
									"        postman.setNextRequest('Add Comment with Invalid Payload');\r",
									"    }\r",
									"}\r",
									" \r",
									"repeatRequestUntilDatasetEmpty();\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let badAddCommentPayloads = pm.environment.get('badAddCommentPayloads');\r",
									"\r",
									"if (!badAddCommentPayloads || badAddCommentPayloads.length === 0) {\r",
									"    badAddCommentPayloads = [\r",
									"        {},\r",
									"        { content: 123 },\r",
									"    ];\r",
									"}\r",
									"\r",
									"const currentBadAddCommentPayload = badAddCommentPayloads.shift();\r",
									"pm.environment.set('currentBadAddCommentPayload', JSON.stringify(currentBadAddCommentPayload));\r",
									"pm.environment.set('badAddCommentPayloads', badAddCommentPayloads);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{currentBadAddCommentPayload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}/comments",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads",
								"{{threadId}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Comment with User Johndoe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response should have 201 status code', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response should have correct property and value', () => {\r",
									"    const content = pm.environment.get('newCommentContent');\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.addedComment).to.be.an('object');\r",
									"    pm.expect(responseJson.data.addedComment.id).to.be.a('string');\r",
									"    pm.expect(responseJson.data.addedComment.id).to.not.equal('');\r",
									"    pm.expect(responseJson.data.addedComment.content).to.equal(content);\r",
									"    pm.expect(responseJson.data.addedComment.owner).to.be.a('string');\r",
									"    pm.expect(responseJson.data.addedComment.owner).to.not.equal('');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken2}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"{{newCommentContent}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}/comments",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads",
								"{{threadId}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Comment with User Dicoding",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response should have 201 status code', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response should have correct property and value', () => {\r",
									"    const content = pm.environment.get('newCommentContent');\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.addedComment).to.be.an('object');\r",
									"    pm.expect(responseJson.data.addedComment.id).to.be.a('string');\r",
									"    pm.expect(responseJson.data.addedComment.id).to.not.equal('');\r",
									"    pm.expect(responseJson.data.addedComment.content).to.equal(content);\r",
									"    pm.expect(responseJson.data.addedComment.owner).to.be.a('string');\r",
									"    pm.expect(responseJson.data.addedComment.owner).to.not.equal('');\r",
									"\r",
									"    pm.environment.set('commentId', responseJson.data.addedComment.id);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"{{newCommentContent}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}/comments",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads",
								"{{threadId}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Commented Thread",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response with status code 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('should contain correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.thread).to.be.an('object');\r",
									"    pm.expect(responseJson.data.thread.id).to.be.a('string');\r",
									"    pm.expect(responseJson.data.thread.id).to.not.equal('');\r",
									"    pm.expect(responseJson.data.thread.title).to.equal(pm.environment.get('newThreadTitle'));\r",
									"    pm.expect(responseJson.data.thread.body).to.equal(pm.environment.get('newThreadBody'));\r",
									"    pm.expect(responseJson.data.thread.date).to.be.a('string');\r",
									"    pm.expect(responseJson.data.thread.data).to.not.equal('');\r",
									"    pm.expect(responseJson.data.thread.username).to.equal(pm.environment.get('newUsername'));\r",
									"    pm.expect(responseJson.data.thread.comments).to.be.an('array');\r",
									"    pm.expect(responseJson.data.thread.comments).to.have.length(2);\r",
									"    \r",
									"    const [comment1, comment2] = responseJson.data.thread.comments;\r",
									"\r",
									"    pm.expect(comment1).to.be.an('object');\r",
									"    pm.expect(comment1.id).to.be.a('string');\r",
									"    pm.expect(comment1.username).to.equal(pm.environment.get('newUsername2'));\r",
									"    pm.expect(comment1.date).to.be.a('string');\r",
									"    pm.expect(comment1.content).to.equal(pm.environment.get('newCommentContent'));\r",
									"\r",
									"    pm.expect(comment2).to.be.an('object');\r",
									"    pm.expect(comment2.id).to.be.a('string');\r",
									"    pm.expect(comment2.username).to.equal(pm.environment.get('newUsername'));\r",
									"    pm.expect(comment2.date).to.be.a('string');\r",
									"    pm.expect(comment2.content).to.equal(pm.environment.get('newCommentContent'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads",
								"{{threadId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Dicoding Comment with No Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response 401 status code', () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('should show Missing Authentication message', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.message).to.equal('Missing authentication');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}/comments/{{commentId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads",
								"{{threadId}}",
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Not Found Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response 404 status code', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('should show Missing Authentication message', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"    pm.expect(responseJson.message).to.not.equal('');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}/comments/xxx",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads",
								"{{threadId}}",
								"comments",
								"xxx"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Dicoding Comment with Using Johndoe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response 403 status code', () => {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test('should show Missing Authentication message', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"    pm.expect(responseJson.message).to.not.equal('');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken2}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}/comments/{{commentId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads",
								"{{threadId}}",
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Dicoding Comment with Using Dicoding",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response 200 status code', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('should show Missing Authentication message', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}/comments/{{commentId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads",
								"{{threadId}}",
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Thread After Dicoding Comment Deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response with status code 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('should contain correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.thread).to.be.an('object');\r",
									"    pm.expect(responseJson.data.thread.id).to.be.a('string');\r",
									"    pm.expect(responseJson.data.thread.id).to.not.equal('');\r",
									"    pm.expect(responseJson.data.thread.title).to.equal(pm.environment.get('newThreadTitle'));\r",
									"    pm.expect(responseJson.data.thread.body).to.equal(pm.environment.get('newThreadBody'));\r",
									"    pm.expect(responseJson.data.thread.date).to.be.a('string');\r",
									"    pm.expect(responseJson.data.thread.data).to.not.equal('');\r",
									"    pm.expect(responseJson.data.thread.username).to.equal(pm.environment.get('newUsername'));\r",
									"    pm.expect(responseJson.data.thread.comments).to.be.an('array');\r",
									"    pm.expect(responseJson.data.thread.comments).to.have.length(2);\r",
									"    \r",
									"    const [comment1, comment2] = responseJson.data.thread.comments;\r",
									"\r",
									"    pm.expect(comment1).to.be.an('object');\r",
									"    pm.expect(comment1.id).to.be.a('string');\r",
									"    pm.expect(comment1.username).to.equal(pm.environment.get('newUsername2'));\r",
									"    pm.expect(comment1.date).to.be.a('string');\r",
									"    pm.expect(comment1.content).to.equal(pm.environment.get('newCommentContent'));\r",
									"\r",
									"    pm.expect(comment2).to.be.an('object');\r",
									"    pm.expect(comment2.id).to.be.a('string');\r",
									"    pm.expect(comment2.username).to.equal(pm.environment.get('newUsername'));\r",
									"    pm.expect(comment2.date).to.be.a('string');\r",
									"    pm.expect(comment2.content).to.equal('**komentar telah dihapus**');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads",
								"{{threadId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[Optional] Replies",
			"item": [
				{
					"name": "[No Test] Prerequiresite",
					"item": [
						{
							"name": "[No Test] Add User Dicoding",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{newUsername}}\",\r\n    \"password\": \"{{newPassword}}\",\r\n    \"fullname\": \"{{newFullname}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[No Test] Add User Johndoe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{newUsername2}}\",\r\n    \"password\": \"{{newPassword2}}\",\r\n    \"fullname\": \"{{newFullname2}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[No Test] Login User Dicoding",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const host = pm.environment.get('host');\r",
											"const port = pm.environment.get('port');\r",
											"const protocol = pm.environment.get('protocol');\r",
											"\r",
											"const postRequest = {\r",
											"    url: `${protocol}://${host}:${port}/users`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            username: pm.environment.get('newUsername'),\r",
											"            password: pm.environment.get('newPassword'),\r",
											"            fullname: pm.environment.get('newFullname')\r",
											"        }),\r",
											"    },\r",
											"};\r",
											"\r",
											"pm.sendRequest(postRequest, (error, response) => {\r",
											"    console.log(error ? error : response.json());\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.environment.set('accessToken', responseJson.data.accessToken);\r",
											"pm.environment.set('refreshToken', responseJson.data.refreshToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{newUsername}}\",\r\n    \"password\": \"{{newPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/authentications",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"authentications"
									]
								}
							},
							"response": []
						},
						{
							"name": "[No Test] Login User Johndoe",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const host = pm.environment.get('host');\r",
											"const port = pm.environment.get('port');\r",
											"const protocol = pm.environment.get('protocol');\r",
											"\r",
											"const postRequest = {\r",
											"    url: `${protocol}://${host}:${port}/users`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            username: pm.environment.get('newUsername'),\r",
											"            password: pm.environment.get('newPassword'),\r",
											"            fullname: pm.environment.get('newFullname')\r",
											"        }),\r",
											"    },\r",
											"};\r",
											"\r",
											"pm.sendRequest(postRequest, (error, response) => {\r",
											"    console.log(error ? error : response.json());\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.environment.set('accessToken2', responseJson.data.accessToken);\r",
											"pm.environment.set('refreshToken2', responseJson.data.refreshToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{newUsername2}}\",\r\n    \"password\": \"{{newPassword2}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/authentications",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"authentications"
									]
								}
							},
							"response": []
						},
						{
							"name": "[No Test] Add Thread with User Dicoding",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.environment.set('threadId', responseJson.data.addedThread.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"{{newThreadTitle}}\",\r\n    \"body\": \"{{newThreadBody}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/threads",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"threads"
									]
								}
							},
							"response": []
						},
						{
							"name": "[No Test] Add Comment with User Dicoding",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.environment.set('commentId', responseJson.data.addedComment.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"content\": \"{{newCommentContent}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}/comments",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"threads",
										"{{threadId}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "[No Test] Add Another Comment with User Dicoding",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"content\": \"{{newCommentContent}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}/comments",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"threads",
										"{{threadId}}",
										"comments"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "[Optional] Add Reply to Dicoding Comment with No Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response 401 status code', () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('should show Missing Authentication message', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.message).to.equal('Missing authentication');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"{{newReplyContent}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}/comments/{{commentId}}/replies",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads",
								"{{threadId}}",
								"comments",
								"{{commentId}}",
								"replies"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Optional] Add Reply to Dicoding Comment with Invalid Thread",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response with 404 status code', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('should fail status and message', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"    pm.expect(responseJson.message).to.not.equal('');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken2}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"{{newReplyContent}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads/xxxx/comments/{{commentId}}/replies",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads",
								"xxxx",
								"comments",
								"{{commentId}}",
								"replies"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Optional] Add Reply to Invalid Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response with 404 status code', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('should fail status and message', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"    pm.expect(responseJson.message).to.not.equal('');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken2}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"{{newReplyContent}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}/comments/xxx/replies",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads",
								"{{threadId}}",
								"comments",
								"xxx",
								"replies"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Optional] Add Reply to Dicoding Comment with Bad Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response should have 400 status code', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.not.equal('');\r",
									"});\r",
									"\r",
									"const repeatRequestUntilDatasetEmpty = () => {\r",
									"    const badAddReplyPayloads = pm.environment.get('badAddReplyPayloads');\r",
									" \r",
									"    if(badAddReplyPayloads && badAddReplyPayloads.length > 0) {\r",
									"        postman.setNextRequest('[Optional] Add Reply to Dicoding Comment with Bad Payload');\r",
									"    }\r",
									"}\r",
									" \r",
									"repeatRequestUntilDatasetEmpty();\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let badAddReplyPayloads = pm.environment.get('badAddReplyPayloads');\r",
									"\r",
									"if (!badAddReplyPayloads || badAddReplyPayloads.length === 0) {\r",
									"    badAddReplyPayloads = [\r",
									"        {},\r",
									"        { content: 123 },\r",
									"    ]\r",
									"}\r",
									"\r",
									"const currentBadAddReplyPayload = badAddReplyPayloads.shift();\r",
									"pm.environment.set('badAddReplyPayloads', badAddReplyPayloads);\r",
									"pm.environment.set('currentBadAddReplyPayload', JSON.stringify(currentBadAddReplyPayload));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken2}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{currentBadAddReplyPayload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}/comments/{{commentId}}/replies",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads",
								"{{threadId}}",
								"comments",
								"{{commentId}}",
								"replies"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Optional] Add Reply to Dicoding Comment using Johndoe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response with 201 status code', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('should contain correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.addedReply).to.be.an('object');\r",
									"    pm.expect(responseJson.data.addedReply.id).to.be.a('string');\r",
									"    pm.expect(responseJson.data.addedReply.id).to.not.equal('');\r",
									"    pm.expect(responseJson.data.addedReply.content).to.equal(pm.environment.get('newReplyContent'));\r",
									"    pm.expect(responseJson.data.addedReply.owner).to.be.a('string');\r",
									"    pm.expect(responseJson.data.addedReply.owner).to.not.equal('');\r",
									"\r",
									"    pm.environment.set('replyId', responseJson.data.addedReply.id);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken2}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"{{newReplyContent}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}/comments/{{commentId}}/replies",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads",
								"{{threadId}}",
								"comments",
								"{{commentId}}",
								"replies"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Optional] Add Reply to Dicoding Comment using Dicoding",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response with 201 status code', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('should contain correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.addedReply).to.be.an('object');\r",
									"    pm.expect(responseJson.data.addedReply.id).to.be.a('string');\r",
									"    pm.expect(responseJson.data.addedReply.id).to.not.equal('');\r",
									"    pm.expect(responseJson.data.addedReply.content).to.equal(pm.environment.get('newReplyContent'));\r",
									"    pm.expect(responseJson.data.addedReply.owner).to.be.a('string');\r",
									"    pm.expect(responseJson.data.addedReply.owner).to.not.equal('');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"{{newReplyContent}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}/comments/{{commentId}}/replies",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads",
								"{{threadId}}",
								"comments",
								"{{commentId}}",
								"replies"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Optional] Get Replied Thread",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response with status code 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('should contain correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.thread).to.be.an('object');\r",
									"    pm.expect(responseJson.data.thread.id).to.be.a('string');\r",
									"    pm.expect(responseJson.data.thread.id).to.not.equal('');\r",
									"    pm.expect(responseJson.data.thread.title).to.equal(pm.environment.get('newThreadTitle'));\r",
									"    pm.expect(responseJson.data.thread.body).to.equal(pm.environment.get('newThreadBody'));\r",
									"    pm.expect(responseJson.data.thread.date).to.be.a('string');\r",
									"    pm.expect(responseJson.data.thread.data).to.not.equal('');\r",
									"    pm.expect(responseJson.data.thread.username).to.equal(pm.environment.get('newUsername'));\r",
									"    pm.expect(responseJson.data.thread.comments).to.be.an('array');\r",
									"    pm.expect(responseJson.data.thread.comments).to.have.length(2);\r",
									"    \r",
									"    const [comment1, comment2] = responseJson.data.thread.comments;\r",
									"\r",
									"    pm.expect(comment1).to.be.an('object');\r",
									"    pm.expect(comment1.id).to.be.a('string');\r",
									"    pm.expect(comment1.username).to.equal(pm.environment.get('newUsername'));\r",
									"    pm.expect(comment1.date).to.be.a('string');\r",
									"    pm.expect(comment1.content).to.equal(pm.environment.get('newCommentContent'));\r",
									"    pm.expect(comment1.replies).to.be.an('array');\r",
									"    pm.expect(comment1.replies).to.have.length(2);\r",
									"\r",
									"    // this is to make sure reply on show on replied comment\r",
									"    pm.expect(comment2.replies).to.have.length(0);\r",
									"\r",
									"    const [reply1, reply2] = comment1.replies;\r",
									"\r",
									"    pm.expect(reply1).to.be.an('object');\r",
									"    pm.expect(reply1.id).to.be.a('string');\r",
									"    pm.expect(reply1.id).to.not.equal('');\r",
									"    pm.expect(reply1.content).to.equal(pm.environment.get('newReplyContent'));\r",
									"    pm.expect(reply1.date).to.be.a('string');\r",
									"    pm.expect(reply1.date).to.not.equal('');\r",
									"    pm.expect(reply1.username).to.equal(pm.environment.get('newUsername2'));\r",
									"\r",
									"    pm.expect(reply2).to.be.an('object');\r",
									"    pm.expect(reply2.id).to.be.a('string');\r",
									"    pm.expect(reply2.id).to.not.equal('');\r",
									"    pm.expect(reply2.content).to.equal(pm.environment.get('newReplyContent'));\r",
									"    pm.expect(reply2.date).to.be.a('string');\r",
									"    pm.expect(reply2.date).to.not.equal('');\r",
									"    pm.expect(reply2.username).to.equal(pm.environment.get('newUsername'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads",
								"{{threadId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Optional] Delete Not Found Reply",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response 404 status code', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('should show Missing Authentication message', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"    pm.expect(responseJson.message).to.not.equal('');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}/comments/{{commentId}}/replies/xxx",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads",
								"{{threadId}}",
								"comments",
								"{{commentId}}",
								"replies",
								"xxx"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Optional] Delete Johndoe Reply using Dicoding",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response 403 status code', () => {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test('should show Missing Authentication message', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"    pm.expect(responseJson.message).to.not.equal('');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}/comments/{{commentId}}/replies/{{replyId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads",
								"{{threadId}}",
								"comments",
								"{{commentId}}",
								"replies",
								"{{replyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Optional] Delete Johndoe Reply using Johndoe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response 200 status code', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('should show Missing Authentication message', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken2}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}/comments/{{commentId}}/replies/{{replyId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads",
								"{{threadId}}",
								"comments",
								"{{commentId}}",
								"replies",
								"{{replyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Optional] Get Replied Thread After Johndoe Reply Deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should response with status code 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('should contain correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.thread).to.be.an('object');\r",
									"    pm.expect(responseJson.data.thread.id).to.be.a('string');\r",
									"    pm.expect(responseJson.data.thread.id).to.not.equal('');\r",
									"    pm.expect(responseJson.data.thread.title).to.equal(pm.environment.get('newThreadTitle'));\r",
									"    pm.expect(responseJson.data.thread.body).to.equal(pm.environment.get('newThreadBody'));\r",
									"    pm.expect(responseJson.data.thread.date).to.be.a('string');\r",
									"    pm.expect(responseJson.data.thread.data).to.not.equal('');\r",
									"    pm.expect(responseJson.data.thread.username).to.equal(pm.environment.get('newUsername'));\r",
									"    pm.expect(responseJson.data.thread.comments).to.be.an('array');\r",
									"    pm.expect(responseJson.data.thread.comments).to.have.length(2);\r",
									"    \r",
									"    const [comment] = responseJson.data.thread.comments;\r",
									"\r",
									"    pm.expect(comment).to.be.an('object');\r",
									"    pm.expect(comment.id).to.be.a('string');\r",
									"    pm.expect(comment.username).to.equal(pm.environment.get('newUsername'));\r",
									"    pm.expect(comment.date).to.be.a('string');\r",
									"    pm.expect(comment.content).to.equal(pm.environment.get('newCommentContent'));\r",
									"    pm.expect(comment.replies).to.be.an('array');\r",
									"    pm.expect(comment.replies).to.have.length(2);\r",
									"\r",
									"    const [reply1, reply2] = comment.replies;\r",
									"\r",
									"    pm.expect(reply1).to.be.an('object');\r",
									"    pm.expect(reply1.id).to.be.a('string');\r",
									"    pm.expect(reply1.id).to.not.equal('');\r",
									"    pm.expect(reply1.content).to.equal('**balasan telah dihapus**');\r",
									"    pm.expect(reply1.date).to.be.a('string');\r",
									"    pm.expect(reply1.date).to.not.equal('');\r",
									"    pm.expect(reply1.username).to.equal(pm.environment.get('newUsername2'));\r",
									"\r",
									"    pm.expect(reply2).to.be.an('object');\r",
									"    pm.expect(reply2.id).to.be.a('string');\r",
									"    pm.expect(reply2.id).to.not.equal('');\r",
									"    pm.expect(reply2.content).to.equal(pm.environment.get('newReplyContent'));\r",
									"    pm.expect(reply2.date).to.be.a('string');\r",
									"    pm.expect(reply2.date).to.not.equal('');\r",
									"    pm.expect(reply2.username).to.equal(pm.environment.get('newUsername'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"threads",
								"{{threadId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}